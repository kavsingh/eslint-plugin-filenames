name: Publish

on:
  release:
    types:
      - published

  # workflow dispatch for debug purposes only
  workflow_dispatch:
    inputs:
      release_tag:
        description: Expected release tag
        type: string
        required: true

jobs:
  test-and-lint:
    uses: ./.github/workflows/test-and-lint.yaml

  publish:
    name: Publish
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: validate version
        id: validate_version
        run: |
          tag_version=$(echo "${{ github.event.release.tag_name || inputs.release_tag }}" | awk 'sub(/^v/,"")1')
          package_version=$(awk -F'"' '/"version": ".+"/{ print $4; exit; }' package.json)

          if [[ ${tag_version} != ${package_version} ]] ; then
            echo "Invalid package version, expected ${tag_version}, got ${package_version}"
            exit 1
          fi

          echo "version=${tag_version}" >> $GITHUB_OUTPUT

      - if: ${{ success() }}
        name: get publish info
        id: get_publish_info
        run: |
          dry=${{ github.event_name == 'workflow_dispatch' }}
          version=${{ steps.validate_version.outputs.version }}
          pre=$(echo "${version}" | awk -F'[-.]' '{print $4; exit; }')

          if [[ ${pre} ]] ; then
            tag=$pre
          else
            tag=latest
          fi

          {
            echo "### Publish"
            echo "| version | tag | dry run |"
            echo "| - | - | - |"
            echo "| ${version} | ${tag} | ${dry} |"
          } >> $GITHUB_STEP_SUMMARY

          {
            echo "tag=${tag}"
            echo "dry=${dry}"
          } >> $GITHUB_OUTPUT

      - if: ${{ success() }}
        name: enable pnpm
        run: corepack enable pnpm

      - if: ${{ success() }}
        name: setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: https://registry.npmjs.org

      - if: ${{ success() }}
        name: install and build
        run: >
          pnpm install --frozen-lockfile
          pnpm build

      - if: ${{ success() }}
        name: publish
        run: npm publish --access public --tag ${{ steps.get_publish_info.outputs.tag }}${{ steps.get_publish_info.outputs.dry && ' --dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{steps.get_publish_info.outputs.dry && 'INVALID TOKEN' || secrets.NPM_PUBLISH_TOKEN}}
